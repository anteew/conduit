{
  "ampcode": "v1",
  "waves": [
    { "id": "Wave-DSL-Core", "parallel": true, "tasks": ["T2101-DSL-Types", "T2102-DSL-Interpreter-HTTP", "T2103-DSL-Selectors"] },
    { "id": "Wave-HTTP-Integrate", "parallel": true, "tasks": ["T2110-HTTP-Integrate-DSL", "T2111-HTTP-Errors"] },
    { "id": "Wave-WS-Integrate", "parallel": true, "tasks": ["T2120-WS-Integrate-DSL", "T2121-WS-Errors"] },
    { "id": "Wave-Safety-Defaults", "parallel": true, "tasks": ["T2130-Safety-Limits", "T2131-Record-Replay", "T2140-Default-Rules", "T2141-Docs-DSL"] },
    { "id": "Wave-Link-Core", "parallel": false, "tasks": ["T2150-Terminal-TCP", "T2151-Backend-Config"] }
  ],
  "tasks": [
    {"id":"T2101-DSL-Types","agent":"gemini","title":"Add DSL types, loader, and schema","why":"Foundation for rule-driven mappings","allowedFiles":["src/dsl/types.ts","src/dsl/loader.ts","docs/rfcs/PROTO-DSL.md","docs/rfcs/PROTO-DSL-v0.md"],"verify":["npm ci","node --loader ts-node/esm -e \"import('./src/dsl/loader.ts').then(()=>console.log('ok'))\""],"deliverables":["DSL TS types","YAML loader with schema validation"]},
    {"id":"T2102-DSL-Interpreter-HTTP","agent":"gemini","title":"Implement DSL interpreter for HTTP","why":"Translate HTTP requests to control frames via rules","allowedFiles":["src/dsl/interpreter.ts","src/connectors/http.ts","src/control/client.ts"],"verify":["CONDUIT_HTTP_PORT=9087 node --loader ts-node/esm src/index.ts & echo $! > /tmp/conduit.pid; sleep 1","curl -sS http://127.0.0.1:9087/health","curl -sS -X POST http://127.0.0.1:9087/v1/enqueue -H 'content-type: application/json' -d '{\\"to\\":\\"agents/A/inbox\\",\\"envelope\\":{\\"id\\":\\"e-1\\",\\"ts\\":\\"2025-10-19T00:00:00Z\\",\\"type\\":\\"notify\\",\\"payload\\":{}}}'","kill $(cat /tmp/conduit.pid) || true"],"deliverables":["Interpreter apply(when/map/send/onError) for HTTP"]},
    {"id":"T2103-DSL-Selectors","agent":"gemini","title":"Add JSONPointer/JSONPath selectors and helpers","why":"Ergonomic field extraction in rules","allowedFiles":["src/dsl/selectors.ts","src/dsl/helpers.ts","docs/rfcs/PROTO-DSL-v0.md"],"verify":["node --loader ts-node/esm -e \"import('./src/dsl/helpers.ts').then(()=>console.log('ok'))\""],"deliverables":["Selectors (Pointer/Path)","Helpers (coalesce/default/pick/regex/toInt/toFloat/toString)"]},
    {"id":"T2110-HTTP-Integrate-DSL","agent":"gemini","title":"Replace HTTP hardcoded mappings with DSL","why":"Make connectors data-driven by rules file","allowedFiles":["src/connectors/http.ts","config/rules.yaml","README.md"],"verify":["CONDUIT_RULES=config/rules.yaml node --loader ts-node/esm src/index.ts & echo $! > /tmp/conduit.pid; sleep 1","curl -sS http://127.0.0.1:9087/health","curl -sS -X POST http://127.0.0.1:9087/v1/enqueue -H 'content-type: application/json' -d '{\\"to\\":\\"agents/B/inbox\\",\\"envelope\\":{\\"id\\":\\"e-2\\",\\"ts\\":\\"2025-10-19T00:00:00Z\\",\\"type\\":\\"task\\",\\"payload\\":{}}}'","kill $(cat /tmp/conduit.pid) || true"],"deliverables":["HTTP connector loads rules and executes interpreter"]},
    {"id":"T2111-HTTP-Errors","agent":"gemini","title":"Map frame errors to HTTP status via DSL onError","why":"Predictable external semantics","allowedFiles":["src/dsl/interpreter.ts","src/connectors/http.ts","docs/rfcs/PROTO-DSL-v0.md"],"verify":["node --loader ts-node/esm src/index.ts & echo $! > /tmp/conduit.pid; sleep 1","curl -s -o /dev/null -w '%{http_code}' 'http://127.0.0.1:9087/v1/snapshot?view=__unknown__' | grep -E '400|404|500'","kill $(cat /tmp/conduit.pid) || true"],"deliverables":["HTTP onError mappings for InvalidJSON/UnknownView/UnknownStream/Internal"]},
    {"id":"T2120-WS-Integrate-DSL","agent":"gemini","title":"Wire WS subscribe/grant/ack/nack to DSL","why":"Move WS mapping to rules","allowedFiles":["src/connectors/ws.ts","src/dsl/interpreter.ts","config/rules.yaml"],"verify":["node --loader ts-node/esm src/index.ts & echo $! > /tmp/conduit.pid; sleep 1","node --loader ts-node/esm -e \"import('ws').then(async WS=>{ const ws=new WS.WebSocket('ws://127.0.0.1:9088/v1/subscribe?stream=agents/Test/inbox'); ws.on('open',()=>{ ws.send(JSON.stringify({credit:1})); console.log('ok'); process.exit(0);});});\"","kill $(cat /tmp/conduit.pid) || true"],"deliverables":["WS connector uses DSL rules for subscribe and messages"]},
    {"id":"T2121-WS-Errors","agent":"gemini","title":"WS error frames and closes via DSL","why":"Consistent error semantics","allowedFiles":["src/connectors/ws.ts","src/dsl/interpreter.ts"],"verify":["# Manual: send invalid JSON, expect error frame + close"],"deliverables":["UnknownOp → close 1003; InvalidJSON → close 1007; structured error frames"]},
    {"id":"T2130-Safety-Limits","agent":"gemini","title":"Add allowlists, body caps, rule timeouts","why":"Safe operation by default","allowedFiles":["src/dsl/interpreter.ts","src/connectors/http.ts","README.md"],"verify":["# Manual: set small caps, confirm 413/429 or mapped errors"],"deliverables":["Alowlists, size/time limits; documented defaults"]},
    {"id":"T2131-Record-Replay","agent":"gemini","title":"Control frame recorder and tailer","why":"Debug & reproducibility","allowedFiles":["src/control/record.ts","README.md"],"verify":["CONDUIT_RECORD=/tmp/conduit.ctrl.jsonl node --loader ts-node/esm src/index.ts & echo $! > /tmp/conduit.pid; sleep 1","curl -sS http://127.0.0.1:9087/health","grep -q 'hello' /tmp/conduit.ctrl.jsonl && echo ok","kill $(cat /tmp/conduit.pid) || true"],"deliverables":["JSONL recorder; quick tail instructions"]},
    {"id":"T2140-Default-Rules","agent":"claude","title":"Provide default.rules.yaml mirroring current endpoints","why":"Easy enablement and parity with code paths","allowedFiles":["config/rules.yaml","README.md"],"verify":["CONDUIT_RULES=config/rules.yaml node --loader ts-node/esm src/index.ts & echo $! > /tmp/conduit.pid; sleep 1","curl -sS -X POST http://127.0.0.1:9087/v1/enqueue -H 'content-type: application/json' -d '{\\"to\\":\\"agents/C/inbox\\",\\"envelope\\":{\\"id\\":\\"e-3\\",\\"ts\\":\\"2025-10-19T00:00:00Z\\",\\"type\\":\\"notify\\",\\"payload\\":{}}}'","kill $(cat /tmp/conduit.pid) || true"],"deliverables":["rules.yaml with enqueue/stats/snapshot/metrics/subscribe/grant/ack/nack mappings"]},
    {"id":"T2141-Docs-DSL","agent":"claude","title":"Document DSL usage and examples","why":"Enable others to add endpoints without code changes","allowedFiles":["README.md","docs/rfcs/PROTO-DSL-v0.md"],"verify":["# Manual: review examples; copy-paste works"],"deliverables":["README section + example rules"]},
    {"id":"T2150-Terminal-TCP","agent":"gemini","title":"Add TCP/Unix terminal link to a real core","why":"Connect Conduit to Courier control listener","allowedFiles":["src/control/terminal.ts","src/index.ts","config/.env.dev","README.md"],"verify":["# Manual: set CONDUIT_BACKEND=tcp://127.0.0.1:9787 and connect to Courier listener"],"deliverables":["Terminal client; env-driven backend selection"]},
    {"id":"T2151-Backend-Config","agent":"gemini","title":"Config switch: demo backend vs TCP/Unix terminal","why":"Seamless transition from demo to real core","allowedFiles":["src/index.ts","README.md"],"verify":["CONDUIT_BACKEND=demo node --loader ts-node/esm src/index.ts & kill $! || true","CONDUIT_BACKEND=tcp://127.0.0.1:9787 node --loader ts-node/esm src/index.ts & kill $! || true"],"deliverables":["Backend selection logic and docs"]}
  ]
}
