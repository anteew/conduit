{
  "ampcode": "v1",
  "waves": [
    { "id": "Wave-Registry", "parallel": true, "tasks": [
      "T6201-Codec-Registry-Adapters"
    ]},
    { "id": "Wave-HTTP-Codecs", "parallel": true, "tasks": [
      "T6202-HTTP-Decode-Path",
      "T6203-HTTP-Encode-Path",
      "T6204-HTTP-Observability"
    ]},
    { "id": "Wave-WS-Codecs", "parallel": true, "tasks": [
      "T6205-WS-Negotiation",
      "T6206-WS-Codec-Tests"
    ]},
    { "id": "Wave-Perf-Docs", "parallel": true, "tasks": [
      "T6207-Perf-Small",
      "T6208-Docs-Examples"
    ]},
    { "id": "Wave-Optional-CBOR", "parallel": true, "tasks": [
      "T6209-CBOR-Adapter"
    ]},
    { "id": "Wave-Guardrails", "parallel": true, "tasks": [
      "T6210-Decoded-Limits"
    ]}
  ],
  "tasks": [
    {
      "id": "T6201-Codec-Registry-Adapters",
      "agent": "amp",
      "title": "Finalize codec registry and adapters (json, msgpack) with unit tests",
      "why": "Provide a single, reusable codec API for all connectors and future protocols.",
      "allowedFiles": ["src/codec/**", "tests/**"],
      "verify": [
        "node -e \"const { listCodecs } = require('./dist/codec/registry.js'); console.log(listCodecs().map(c=>c.name).join(','));\""
      ],
      "deliverables": ["src/codec/**", "tests/codec_roundtrip.test.ts"]
    },
    {
      "id": "T6202-HTTP-Decode-Path",
      "agent": "amp",
      "title": "HTTP: decode request bodies via registry by Content-Type (flagged)",
      "why": "Support msgpack/cbor inputs without touching DSL or backends.",
      "allowedFiles": ["src/connectors/http.ts", "docs/SRE-RUNBOOK.md", "tests/**"],
      "verify": [
        "CONDUIT_CODECS_HTTP=true npm run test:compile",
        "node -e \"const http=require('http'); const {spawn}=require('child_process'); const { pack }=require('msgpackr'); const env={...process.env,CONDUIT_CODECS_HTTP:'true'}; const srv=spawn('node',['dist/index.js'],{env}); setTimeout(()=>{ const body=pack({to:'agents/Codec/inbox',envelope:{id:'x'}}); const req=http.request('http://127.0.0.1:9087/v1/enqueue',{method:'POST',headers:{'content-type':'application/msgpack','content-length':body.length}} ,res=>{console.log('STATUS',res.statusCode); res.resume(); res.on('end',()=>srv.kill());}); req.write(body); req.end(); },700);\""
      ],
      "deliverables": ["src/connectors/http.ts"]
    },
    {
      "id": "T6203-HTTP-Encode-Path",
      "agent": "amp",
      "title": "HTTP: negotiate response via Accept with X-Codec override (flagged)",
      "why": "Serve msgpack/cbor responses where clients prefer binary; preserve JSON fallback.",
      "allowedFiles": ["src/connectors/http.ts", "docs/SRE-RUNBOOK.md", "tests/**"],
      "verify": [
        "CONDUIT_CODECS_HTTP=true node -e \"const http=require('http'); const {spawn}=require('child_process'); const env={...process.env,CONDUIT_CODECS_HTTP:'true'}; const srv=spawn('node',['dist/index.js'],{env}); setTimeout(()=>{ http.get({host:'127.0.0.1',port:9087,path:'/v1/metrics',headers:{Accept:'application/msgpack'}},res=>{console.log('CT',res.headers['content-type']); res.resume(); res.on('end',()=>srv.kill());}); },700);\""
      ],
      "deliverables": ["src/connectors/http.ts", "docs/SRE-RUNBOOK.md"]
    },
    {
      "id": "T6204-HTTP-Observability",
      "agent": "amp",
      "title": "HTTP: log codec + per-codec metrics counters/bytes",
      "why": "Operator visibility into protocol usage and impact.",
      "allowedFiles": ["src/connectors/http.ts", "docs/OBSERVABILITY.md", "tests/**"],
      "verify": ["curl -s http://127.0.0.1:9087/v1/metrics | jq .http | true"],
      "deliverables": ["src/connectors/http.ts", "docs/OBSERVABILITY.md"]
    },
    {
      "id": "T6205-WS-Negotiation",
      "agent": "amp",
      "title": "WS: negotiate ?codec=... and support binary frames for msgpack/cbor (flagged)",
      "why": "Symmetric codec support and performance for WS flows.",
      "allowedFiles": ["src/connectors/ws.ts", "docs/SRE-RUNBOOK.md", "tests/**"],
      "verify": [
        "CONDUIT_CODECS_WS=true npm run test:compile && node tests_compiled/tests/ws_bidir.test.js"
      ],
      "deliverables": ["src/connectors/ws.ts"]
    },
    {
      "id": "T6206-WS-Codec-Tests",
      "agent": "amp",
      "title": "WS: add tests for codec negotiation, error mapping, and oversize with binary frames",
      "why": "Ensure correctness and safety for WS binary flows.",
      "allowedFiles": ["tests/**"],
      "verify": ["npm run test:compile && node tests_compiled/tests/ws_oversize.test.js"],
      "deliverables": ["tests/ws_codecs.test.ts"]
    },
    {
      "id": "T6207-Perf-Small",
      "agent": "amp",
      "title": "Perf: compare JSON vs msgpack small-message latency and p50/p95",
      "why": "Quantify benefits and regressions; inform defaults.",
      "allowedFiles": ["tests/**", "public/**", "docs/OBSERVABILITY.md"],
      "verify": ["npm run bench:small"],
      "deliverables": ["tests/perf_small_codecs.test.ts", "public/perf.html"]
    },
    {
      "id": "T6208-Docs-Examples",
      "agent": "amp",
      "title": "Docs: add HTTP/WS codec examples (Accept, Content-Type, ?codec)",
      "why": "Make it simple for developers to opt into binary codecs.",
      "allowedFiles": ["docs/SRE-RUNBOOK.md", "docs/rfcs/**"],
      "verify": ["rg -n 'application/msgpack|application/cbor|\\?codec=' docs -S"],
      "deliverables": ["docs/SRE-RUNBOOK.md"]
    },
    {
      "id": "T6209-CBOR-Adapter",
      "agent": "amp",
      "title": "Optional CBOR (cbor-x) adapter behind flag with unit tests",
      "why": "Offer a standards-oriented alternative to msgpack.",
      "allowedFiles": ["src/codec/**", "tests/**"],
      "verify": ["node -e \"console.log('ok')\""],
      "deliverables": ["src/codec/cbor.ts", "tests/codec_cbor.test.ts"]
    },
    {
      "id": "T6210-Decoded-Limits",
      "agent": "amp",
      "title": "Add decoded size/depth caps; map codec errors to 400/1007; tests",
      "why": "Harden against pathological or malicious payloads.",
      "allowedFiles": ["src/connectors/http.ts", "src/connectors/ws.ts", "docs/OBSERVABILITY.md", "tests/**"],
      "verify": ["npm run test:compile && node tests_compiled/tests/json_cap.test.js"],
      "deliverables": ["src/connectors/http.ts", "src/connectors/ws.ts"]
    }
  ]
}
