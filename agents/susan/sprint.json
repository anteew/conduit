{
  "ampcode": "v1",
  "waves": [
    { "id": "Wave-HTTP-Codecs", "parallel": true, "tasks": [
      "T7101-HTTP-Codec-Decode",
      "T7102-HTTP-Codec-Encode",
      "T7103-HTTP-Codec-Observability"
    ]},
    { "id": "Wave-WS-Codecs", "parallel": true, "tasks": [
      "T7110-WS-Codec-Negotiation",
      "T7111-WS-Codec-Frames",
      "T7112-WS-Decode-Errors"
    ]},
    { "id": "Wave-Guardrails", "parallel": true, "tasks": [
      "T7120-Decoded-Size-Depth-Caps"
    ]},
    { "id": "Wave-ESM-Fix", "parallel": true, "tasks": [
      "T7130-ESM-Reload-Shutdown-Imports"
    ]},
    { "id": "Wave-Docs-Perf", "parallel": true, "tasks": [
      "T7140-Docs-Codec-Usage",
      "T7141-Perf-Small-Report"
    ]}
  ],
  "tasks": [
    {
      "id": "T7101-HTTP-Codec-Decode",
      "agent": "amp",
      "title": "HTTP: decode request bodies via registry by Content-Type (opt-in flag)",
      "why": "Enable MessagePack inputs without changing defaults; preserve limits and error mapping.",
      "allowedFiles": ["src/connectors/http.ts", "src/codec/**", "docs/SRE-RUNBOOK.md", "tests/**"],
      "verify": [
        "CONDUIT_CODECS_HTTP=true npm run test:compile",
        "CONDUIT_CODECS_HTTP=true node tests_compiled/tests/http_codec_decode.test.js"
      ],
      "deliverables": ["src/connectors/http.ts"]
    },
    {
      "id": "T7102-HTTP-Codec-Encode",
      "agent": "amp",
      "title": "HTTP: negotiate response codec via Accept with X-Codec override (opt-in)",
      "why": "Clients can opt into binary responses while keeping JSON fallback.",
      "allowedFiles": ["src/connectors/http.ts", "docs/SRE-RUNBOOK.md", "tests/**"],
      "verify": [
        "CONDUIT_CODECS_HTTP=true node tests_compiled/tests/http_codec_encode.test.js"
      ],
      "deliverables": ["src/connectors/http.ts", "docs/SRE-RUNBOOK.md"]
    },
    {
      "id": "T7103-HTTP-Codec-Observability",
      "agent": "amp",
      "title": "HTTP: log codec in JSONL and add per-codec counters/bytes to /v1/metrics",
      "why": "Operator visibility into codec usage and impact.",
      "allowedFiles": ["src/connectors/http.ts", "docs/OBSERVABILITY.md"],
      "verify": [
        "CONDUIT_CODECS_HTTP=true node -e \"(async()=>{const http=require('http');http.get('http://127.0.0.1:9087/v1/metrics',res=>{res.resume();res.on('end',()=>console.log('ok'));});})()\""
      ],
      "deliverables": ["src/connectors/http.ts", "docs/OBSERVABILITY.md"]
    },
    {
      "id": "T7110-WS-Codec-Negotiation",
      "agent": "amp",
      "title": "WS: negotiate ?codec and Sec-WebSocket-Protocol; store per-connection codec (opt-in)",
      "why": "Symmetric codec support over WS.",
      "allowedFiles": ["src/connectors/ws.ts", "tests/**", "docs/SRE-RUNBOOK.md"],
      "verify": [
        "CONDUIT_CODECS_WS=true npm run test:compile",
        "CONDUIT_CODECS_WS=true node tests_compiled/tests/ws_codec_negotiation.test.js"
      ],
      "deliverables": ["src/connectors/ws.ts"]
    },
    {
      "id": "T7111-WS-Codec-Frames",
      "agent": "amp",
      "title": "WS: encode/decode frames using negotiated codec; binary for msgpack, text for json",
      "why": "End-to-end codec functionality for WS.",
      "allowedFiles": ["src/connectors/ws.ts", "tests/**"],
      "verify": [
        "CONDUIT_CODECS_WS=true node tests_compiled/tests/ws_codec_frames.test.js"
      ],
      "deliverables": ["src/connectors/ws.ts"]
    },
    {
      "id": "T7112-WS-Decode-Errors",
      "agent": "amp",
      "title": "WS: map decode errors to 1007 with error frame; retain 1009 for oversize",
      "why": "Safety and clear error semantics for binary/text frames.",
      "allowedFiles": ["src/connectors/ws.ts", "tests/**"],
      "verify": [
        "CONDUIT_CODECS_WS=true node tests_compiled/tests/ws_oversize.test.js"
      ],
      "deliverables": ["src/connectors/ws.ts"]
    },
    {
      "id": "T7120-Decoded-Size-Depth-Caps",
      "agent": "amp",
      "title": "Add decoded size/depth caps (HTTP+WS); map to 400/1007; add metrics/logs",
      "why": "Harden against pathological payloads.",
      "allowedFiles": ["src/connectors/http.ts", "src/connectors/ws.ts", "docs/OBSERVABILITY.md", "tests/**"],
      "verify": [
        "CONDUIT_CODECS_HTTP=true CONDUIT_CODECS_WS=true npm run test:compile",
        "node tests_compiled/tests/codec_safety.test.js || true"
      ],
      "deliverables": ["src/connectors/http.ts", "src/connectors/ws.ts"]
    },
    {
      "id": "T7130-ESM-Reload-Shutdown-Imports",
      "agent": "amp",
      "title": "Replace require() with dynamic import() in reload/shutdown paths (ESM-safe)",
      "why": "Avoid ESM warnings and ensure graceful shutdown works.",
      "allowedFiles": ["src/index.ts"],
      "verify": [
        "npm run build",
        "node -e \"process.kill(process.spawnSync('node',['dist/index.js'],{stdio:'ignore'}).pid,'SIGTERM')\" || true"
      ],
      "deliverables": ["src/index.ts"]
    },
    {
      "id": "T7140-Docs-Codec-Usage",
      "agent": "amp",
      "title": "Docs: add codec usage to SRE-RUNBOOK (Accept/Content-Type/?codec examples)",
      "why": "Make opt-in flow obvious and copy-paste friendly.",
      "allowedFiles": ["docs/SRE-RUNBOOK.md", "docs/CODECS.md", "examples/**"],
      "verify": [
        "rg -n 'application/msgpack|application/cbor|\\?codec=' docs -S"
      ],
      "deliverables": ["docs/SRE-RUNBOOK.md", "docs/CODECS.md", "examples/*"]
    },
    {
      "id": "T7141-Perf-Small-Report",
      "agent": "amp",
      "title": "Perf: run small-message benchmark for JSON vs msgpack; record results",
      "why": "Quantify expected gains and ensure no regressions.",
      "allowedFiles": ["tests/**", "docs/T7030-BENCHMARK-REPORT.md"],
      "verify": [
        "npm run bench:small || true"
      ],
      "deliverables": ["docs/T7030-BENCHMARK-REPORT.md"]
    }
  ]
}
